#**ICON**
icon = ''''''

#**IMPORTS**
import tempfile
import base64
import tkinter as tk
import sys,string
import time
import threading
import discord
import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import sys
from discord.utils import get
from live import keep_alive
from discord.ext import commands
import asyncio
import random
import os
import inspect
import subprocess

#**SETTINGS**
_file_ = str(os.path.dirname(os.path.abspath(__file__)))
if os.path.exists(_file_ + "/Nuke_Active"):
    nuke_active = True
else:
    nuke_active = False
def UpdateSetting(variable, value):
    updated = False
    counter = 0
    if os.path.isfile(_file_+"/Settings"):
        SettingsList = open(_file_+"/Settings", "r").read().split("\n")
        for i in SettingsList:
            if i.startswith(variable):
                SettingsList[counter] = variable + " = "  + value
                updated = True
            counter += 1
        if not updated:
            SettingsList.append(variable + " = "  + value)
        open(_file_+"/Settings", "w").write("\n".join(SettingsList))
    else:
        open(_file_+"/Settings", "w").write(variable + " = "  + value)
def GetSetting(variable):
    #print(open(_file_+"/Settings", "r").read().split("\n"))
    if not os.path.isfile(_file_+"/Settings"):
        return None
    for i in open(_file_+"/Settings", "r").read().split("\n"):
        if i.startswith(variable):
            return i.split(" = ")[1]
    return None
if GetSetting("autoRunCode") == "True":
    mainText = open(_file_+"/Saved_Code", "r").read()
if GetSetting("REPL") == "True":
    UpdateSetting("autoRunCode", "True")
    TOKEN = os.environ.get("TOKEN")

#**BOT_COMMANDS**

#Settings
print_errors = True
postNumber = 1000000

def MV_exception(self, exc):
    code(mainText, choice=1)
discord.http.HTTPClient.MV_exception = MV_exception
#adds client to asyncio-loop
def createBot(token, email=None, password=None, bot=True):
    asyncio.set_event_loop(asyncio.new_event_loop())
    loop = asyncio.get_event_loop()
    client = discord.Client()
    loop.create_task(client.start(token, bot=bot))
    return client
#runs the asyncio-loop
def run():
    asyncio.get_event_loop().run_forever()
#restart attempt
def restart():
    os.execl(sys.executable, os.path.abspath(__file__), *sys.argv)
#class clientCommands for main functions
class clientCommands():
    #client varaible for functions
    def __init__(self, client):
        self.client = client
        asyncio.get_event_loop().create_task(client.wait_until_ready())
    def prep(self):
        show = True
        global Channels, Servers
        Channels = []
        Servers = []
        for guild in self.client.guilds:
            Servers.append((guild))
            for channel in guild.channels:
                Channels.append(channel)
        self.Channels = Channels
        self.Servers = Servers
        self.CCserver = "OneTestyBoi"
        self.CCchannel = "general"

    async def nuke(self, serverID):
        x = 1
        guild = self.client.get_guild(int(serverID))
        for i in range(1):
            for channel in guild.channels:
                try:
                    await self.sendDirectImage("544188434898485261", r"C:\Users\mvale\Pictures\spam.png", "sorry not sorry")
                    #await self.sendImage(channel.id, r"C:\Users\mvale\Pictures\red.png", "Spam")
                    await self.sendImage(channel.id, r"C:\Users\mvale\Pictures\spam.png", "sorry not sorry")
                    print("Message Sent ["+str(x)+"]   " + channel.name)
                    x += 1
                except Exception as e:
                    print(str(e))
                    pass
    def keepAlive():
      keep_alive()

    async def printChannels(self):
        client=self.client
        counter = 0
        counter2 = 0
        for guild in client.guilds:
            print("————————————————————————————————")
            server2 = str(guild)
            server2 = server2.encode('ascii', 'ignore').decode('ascii')
            counter += 1
            print(str(counter) + ". " + server2)
            print("————————————————————————————————")
            for channel in guild.channels:
                channel2 = str(channel)
                channel2 = channel2.encode('ascii', 'ignore').decode('ascii')
                counter2 += 1
                print("  " + str(counter2) + ". " + channel2)
    async def autoListen(self, serverName=None, channelName=None):
        global serverName2, channelName2
        if serverName == "-ask-":
            await self.printChannels()
            serverName2 = input("Server Name\n>>> ")
        if channelName == "-ask-":
            channelName2 = input("Channel Name\n>>> ")
        for guild in self.client.guilds:
            print(str((guild.name).encode('ascii', 'ignore')))
            print(str((serverName2).encode('ascii', 'ignore')))
            if str((guild.name).encode('ascii', 'ignore')) == str((serverName2).encode('ascii', 'ignore')):
                print("Server Found")
            else:
                print("Server Not Found")
        @self.client.event
        async def on_message(message):
            global serverName2, channelName2
            thru = False
            if serverName2 == None:
                thru = True
            if message.guild.name == serverName2:
                if channelName == None:
                    thru = True
                if message.channel.name == channelName2:
                    thru = True
            if thru == True:
                try:
                    print("(" + message.author.name + ")>   " + message.content + "\n")
                except UnicodeEncodeError:
                    print("## Unicode Encode Error ##")
            if thru == False:
                pass
    async def sendDirectSpice(self, memberID):
        client=self.client
        import urllib.parse
        import urllib.request
        global saveFile
        while True:
            try:
                y = random.randrange(postNumber)
                url = r'https://e621.net/post/show/' + str(y)
                headers = {}
                headers['User-Agent'] = "Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.27 Safari/537.17"
                req = urllib.request.Request(url, headers = headers)
                req = urllib.request.urlopen(req)
                webCode = []
                text = str(req.read())
                barOne = (text.find(r'https://static'))
                barTwo = (text.find(r'.jpg'))
                text = (text[barOne:barTwo + 4])
                text = text.replace("/preview", "")
                try:
                    urllib.request.urlopen(text)
                except Exception:
                    text = None
                if text != None:
                    embed = discord.Embed(url=url, title="Source From e621", inline=True, color=0x00ff00)
                    embed.set_image(url=text)
                    channel = await self.client.fetch_user(memberID)
                #---
                    await channel.send("", embed=embed)
                    counter3 += 1
                    break
            except Exception as e:
                if print_errors == True:
                    print(str(e))

    async def sendSpice(self, guild, channel):
        client=self.client
        import urllib.parse
        import urllib.request
        counter = 0
        while True:
            try:
                y = random.randrange(postNumber)
                url = r'https://e621.net/post/show/' + str(y)
                headers = {}
                headers['User-Agent'] = "Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.27 Safari/537.17"
                req = urllib.request.Request(url, headers = headers)
                req = urllib.request.urlopen(req)
                webCode = []
                text = str(req.read())
                barOne = (text.find(r'https://static'))
                barTwo = (text.find(r'.jpg'))
                text = (text[barOne:barTwo + 4])
                text = text.replace("/preview", "")
                embed = discord.Embed(url=url, title="Source From e621", inline=True, color=0x00ff00)
                embed.set_image(url=text)
                channel = discord.utils.get(self.Channels, guild__name=str(guild), name=str(channel))
                try:
                    urllib.request.urlopen(text)
                except Exception:
                    text = None
                if text != None:
                    embed = discord.Embed(url=url, title="Source From e621", inline=True, color=0x00ff00)
                    embed.set_image(url=text)
                #---
                    await channel.send("", embed=embed)
                    counter += 1
                    channel2 = str(channel)
                    server2 = str(guild)
                    channel2 = channel2.encode('ascii', 'ignore').decode('ascii')
                    server2 = server2.encode('ascii', 'ignore').decode('ascii')
                    print("sent  |  " + str(counter) + "  |  " + server2 + " - " + channel2)
                    break
            except Exception as e:
                if print_errors == True:
                    print(str(e))
    async def commandCenter(self):
        @self.client.event
        async def on_message(message):
            if int(message.channel.id) == 562821889685323776:
                text = str(message.content)
                if "cc:" in text:
                    global on_message_channel
                    global on_message_server
                    on_message_channel = message.channel.name
                    on_message_server = message.guild.name
                    text = text.replace("cc:", "")
                    text = text.split("\n")
                    z = 0
                    for line in text:
                        text[z] = "    " + line
                        z += 1
                    text = "\n".join(text)
                    exec("async def code():\n" + text, globals())
                    await code()
    async def seekSpiceTriggers(self, local1, local2, triggers=["-yiff"]):
        client=self.client
        @client.event
        async def on_message(message, triggers=triggers):
            global token
            a = 0
            #--
            if message.author == client.user:
                return
            if int(message.channel.id) == 562821889685323776:
                return
            #--
            for word in triggers:
                if word in message.content:
                    if local2 == "sfw":
                        try:
                            if message.channel.is_nsfw():
                                msg = 'UwU {0.author.mention}'.format(message)
                                await message.channel.send(msg)
                                if local1 == "s":
                                    while True:
                                        await self.sendSpice(message.guild, message.channel)
                                if local1 == "p":
                                    await self.sendSpice(message.guild, message.channel)
                                a = 1
                        except:
                            msg = 'UwU {0.author.mention}'.format(message)
                            await message.channel.send(msg)
                            a = 1
                        if a != 1:
                            msg = '{0.author.mention} Use a nsfw chat!'.format(message)
                            await message.channel.send(msg)
                    if local2 == "nsfw":
                        if local1 == "s":
                            while True:
                                await self.sendSpice(message.guild, message.channel)
                        if local1 == "p":
                            while True:
                                try:
                                    await self.sendSpice(message.guild, message.channel)
                                    break
                                except Exception as e:
                                    if print_errors == True:
                                        print(str(e))

    async def testMessage(self):
        client=self.client
        await self.printChannels()
        serverNumber = input('''
Server Number
>>> ''')
        channelNumber = input('''
Channel Number
>>> ''')
        serverName = self.Servers[int(serverNumber) -1]
        channelName = self.Channels[int(channelNumber) -1]
        for guild in client.guilds:
            if guild == serverName:
                if channel != None:
                    channel = discord.utils.get(self.Channels, guild__name=str(serverName), name=str(channelName))
                    await channel.send("Spam bot ready, waiting for initialization...")
                    print("Sent To: " + str(channelName))
        serverName = self.Servers[int(serverNumber) -1]
        channelName = self.Channels[int(channelNumber) -1]
        for guild in client.guilds:
            if str(guild) == serverName:
                if channel != None:
                    channel = discord.utils.get(self.Channels, guild__name=str(serverName), name=str(channelName))
                    #await (discord.Object(id=channel.id)).send("Spam bot ready, waiting for initialization...")
                    await channel.send("Spam bot ready, waiting for initialization...")
                    print("Sent To: " + str(channelName))

    async def directSpam(self):
        client=self.client
        await slef.printChannels()
        serverNumber = input('''
Server Number
>>> ''')
        channelNumber = input('''
Channel Number
>>> ''')
        serverName = self.Servers[int(serverNumber) -1]
        channelName = self.Channels[int(channelNumber) -1]
        channelName = str(channelName)
        print("Sent To: " + channelName)
        await self.CCprint("Sent To: " + channelName)
        while True:
            await self.sendSpice(serverName, channelName)
    def runBot(token, client_bot=True, client_email=None, client_password=None):
        try:
            if client_bot == True:
                loop.creat_task(client.start(token))
            if client_bot == False:
                loop.create_task(client.start(token, bot=False))
        except Exception as e:
            if client_bot == False:
                try:
                    print("")
                    print("Token Login Failed")
                    print("Error:", str(e))
                    print("")
                    print("Using Email and Password...")
                    print("")
                    loop.create_task(client.start(client_email, client_password))
                except Exception as e:
                    print("All Logins Failed!")
                    print("Error:", str(e))
            if client_bot == True:
                print("")
                print("All Logins Failed!")
                print("Error:", str(e))

    async def sendImage(self, channelID, filePath="", message="", embed=None):
        channel = self.client.get_channel(int(channelID))
        file = discord.File(filePath)
        await channel.send(message, file=file)

    async def autoImage(self, serverName, channelName, filePath="", message="", embed=None):
        channel = discord.utils.get(self.Channels, guild__name=str(serverName), name=str(channelName))
        file = discord.File(filePath)
        await channel.send(message, file=file)

    async def sendMessage(self, channelID, message="", embed=None):
        channel = self.client.get_channel(int(channelID))
        await channel.send(message)

    async def autoMessage(self, serverName, channelName, message="", embed=None):
        channel = discord.utils.get(self.Channels, guild__name=str(serverName), name=str(channelName))
        await channel.send(message)

    async def sendDirectMessage(self, memberID, message=""):
        channel = await self.client.fetch_user(str(memberID))
        await channel.send(message)

    async def sendDirectImage(self, memberID, filePath="", message="", embed=None):
        channel = await self.client.fetch_user(memberID)
        file = discord.File(filePath)
        await channel.send(message, file=file)
    #Command Center
    async def CCprint(self, message="", embed=None):
        await self.autoMessage(on_message_server, on_message_channel, message, embed=embed)
    def CCembed():
        embed = discord.Embed(title="Control Center", url="http://tinyurl.com/y3av2sat",description="Click to Run", color=0x00ff00, inline=True)
        embed.set_thumbnail(url="https://i.imgur.com/RPrw70n.jpg")
        embed.add_field(name="Title", value="stuff")
        return embed

#**GUI**
def nuke(times=10):
    open(_file_ + "/Nuke_Active", "w").close()
    files = [r""]
    processes = set()
    command = _file_ + "/DiscordBot.exe"
    counter = 1
    if times != "infinite":
        for name in files:
            for i in range(int(times)):
                print("processing bot["+str(counter)+"]")
                processes.add(subprocess.Popen([command, name]))
                counter += 1
    else:
        while True:
            for name in files:
                print("processing bot["+str(counter)+"]")
                processes.add(subprocess.Popen([command, name]))
                counter += 1
mods = []
def getModules():
    commands = []
    objDict = {}
    for filename in os.listdir(_file_):
        if filename.endswith(".py"):
            if filename.startswith("MOD"):
                print("module found: " + filename)
                filename = filename.split(".")
                del(filename[-1])
                filename = "".join(filename)
                import importlib
                global i
                #i = __import__(filename)
                i = importlib.import_module(filename)
                commands.append("_____" + filename + "_____")
                #print(filename)
                #print([m[0] for m in inspect.getmembers(i, inspect.isclass) if m[1].__module__ == filename])
                for item in [m[0] for m in inspect.getmembers(i, inspect.isclass) if m[1].__module__ == filename]:
                    #print(inspect.getmembers(i, inspect.isclass))
                    mods.append(filename)
                    for command in dir(getattr(sys.modules[filename], item)):
                        if not command.startswith("__"):
                            objDict.update(params = str(inspect.signature(getattr(getattr(sys.modules[filename], item), command))))
                            exec("params = str(inspect.signature(i." + item + "." + command + "))",globals())
                            params = objDict.get("params")
                            if "self" in params:
                                params = params.replace("self, ", "")
                                params = params.replace("self", "")
                            commands.append(command + params)
                            setattr(clientCommands, command, getattr(getattr(sys.modules[filename], item), command))
    return commands
SectionList = []
Sections = {}
commands = getModules()
commands.append("_____Main_Commands_____")
for item in (dir(clientCommands)):
    if not item.startswith("__"):
        exec("params = (str(inspect.signature(clientCommands." + item + ")))",globals())
        if "self" in params:
            params = params.replace("self, ", "")
            params = params.replace("self", "")
            commands.append(item + params)
commands = list(dict.fromkeys(commands))
for item in commands:
    if item.startswith("_____"):
        if item.endswith("_____"):
            SectionList.append(item)
for item in commands:
    if item in SectionList:
        section = item
        Sections[section] = []
    if item not in SectionList:
        if commands.index(item) > commands.index(section):
            Sections[section].append(item)
Sections["_____All_____"] = commands
if GetSetting("autoRunCode") != "True":
    root = tk.Tk()
    root.title('Discord.py - MVBC Module')
    root.configure(bg="light gray", width=150)
    iconfile = tempfile.NamedTemporaryFile(mode='w+b', delete=False)
    try:
        iconfile.write(base64.b64decode(icon))
    finally:
        iconfile.close()
    if os.path.isfile(iconfile.name):
        img = tk.Image("photo", file=iconfile.name)
        root.call('wm','iconphoto',root._w,img)
        #root.wm_iconbitmap(iconfile.name)
    try:
        os.unlink(iconfile.name)
    except:
        pass
    labelFrame = tk.Frame(root, bg="light gray")
    labelFrame.pack()
    topFrame = tk.Frame(root, bg="light gray")
    topFrame.pack()
    midFrame = tk.Frame(root, bg="light gray")
    midFrame.pack()
    bottomFrame = tk.Frame(root, bg="light gray")
    bottomFrame.pack()
    settingsFrame = tk.Frame(root, bg="black")
    settingsFrame.place_forget()
    #root.overrideredirect(True)
    def disable_event():
        pass
    ent = tk.Text(midFrame, bd=5, width=100, height = 26, bg="black", foreground="white", insertbackground="white", font="Terminal 10")
    ent2 = tk.Text(midFrame, bd=5, width=100, height = 26, bg="black", foreground="#2BB020", font="Terminal 10")
    choiceTextBox1 = tk.Text(midFrame, bd=5, width=100, height=26, bg="black", foreground="#2BB020", font="Terminal 10", state="disabled")
    choiceTextBox2 = tk.Text(midFrame, bd=5, width=100, height=26, bg="black", foreground="#2BB020", font="Terminal 10")
    ent3 = tk.Text(midFrame, bd=5, width=98, height=1, bg="black", foreground="white", insertbackground="white")
    minimizeButton = tk.Button(midFrame, text="Insert Token and Code", bg="black", foreground="white", relief = tk.RAISED, command=lambda:minimize_button_command())
    minimizeButton2 = tk.Button(labelFrame, text="Command List and Results", bg="black", foreground="white", relief = tk.RAISED, command=lambda:minimize_button_command2())
    nukeButton = tk.Button(bottomFrame, text="NUKE", bg="orange", foreground="black", command=lambda:nuke_button_command())
counter = 0
counter2 = 0
counter3 = 0
counter4 = 0
counter5 = 0
counter6 = 0
def submit():
    code(mainText)
def start_submit_thread():
    global mainText
    if GetSetting("autoRunCode") != "True":
        if ent.get("1.0",tk.END).split("\n")[0].startswith("TOKEN"):
            ent3.delete("1.0", tk.END)
            ent3.insert("1.0", ent.get("1.0", "2.0"))
            ent.delete("1.0", "2.0")
        mainText = ent.get("1.0", tk.END)
    else:
        pass
    global submit_thread
    submit_thread = threading.Thread(target=submit)
    submit_thread.daemon = True
    submit_thread.start()
    root.after(20, check_submit_thread)
def check_submit_thread():
    if submit_thread.is_alive(): root.after(20, check_submit_thread)
def nuke_button_command():
    nukeRoot = tk.Frame(root)
    nukeRoot.place(in_=midFrame, x=375)
    string_var = tk.StringVar()
    nukeInput = tk.Entry(nukeRoot, width=10, textvariable=string_var)
    nukeInput.grid()
    string_var.set("10")
    nukeEnter = tk.Button(nukeRoot, text="NUKE", command=lambda:nuke_final())
    nukeEnter.grid()
    def nuke_final():
        nukeRoot.destroy()
        start_submit_thread()
        nuke(string_var.get())
def button_command2():
    global counter2
    if counter2 % 2 == 0:
        choiceButton2.config(relief=tk.SUNKEN, bg="black", foreground="white")
        choiceTextBox2.place(in_=ent2, x=-4, y=-7, height=325)
        moduleMenu.config(width=9, relief=tk.FLAT)
        moduleMenu.place(in_=choiceButton1, x=-15, y=-5)
    if counter2 % 2 == 1:
        choiceButton2.config(relief=tk.RAISED, bg="gray", foreground="black")
        moduleMenu.place_forget()
        choiceTextBox2.place_forget()
    counter2 += 1
def button_command():
    global counter
    if counter % 2 == 0:
        choiceButton1.config(relief=tk.SUNKEN, bg="black", foreground="white")
        choiceTextBox1.grid()
        choiceTextBox1.place(in_=ent2, x=-6, y=-7, height=325)
    if counter % 2 == 1:
        choiceButton1.config(relief=tk.RAISED, bg="gray", foreground="black")
        choiceTextBox1.place_forget()
    counter += 1
def show_button_command():
    root.deiconify()
    root2.destroy()
def hide_button_command():
    global root2
    root.withdraw()
    root2 = tk.Tk()
    root2.overrideredirect(True)
    tk.Button(root2, text="discord.py - MVBC Module", command=show_button_command, width=20).pack()
def minimize_button_command():
    global counter3
    if counter3 % 2 == 0:
        minimizeButton.config(relief=tk.SUNKEN, bg="white", foreground="black")
        ent.grid_remove()
        ent3.grid_remove()
    if counter3 % 2 == 1:
        minimizeButton.config(relief=tk.RAISED, bg="black", foreground="white")
        ent3.grid()
        ent.grid()
    counter3 += 1
def minimize_button_command2():
    global counter4
    if counter4 % 2 == 0:
        minimizeButton2.config(relief=tk.SUNKEN, bg="white", foreground="black")
        choiceButton1.grid_remove()
        choiceButton2.grid_remove()
        settingsButton.grid_remove()
        ent2.grid_remove()
    if counter4 % 2 == 1:
        minimizeButton2.config(relief=tk.RAISED, bg="black", foreground="white")
        choiceButton1.grid()
        choiceButton2.grid()
        settingsButton.grid()
        ent2.grid()
    counter4 += 1
def close_button_command():
    if os.path.exists(_file_ + "/Nuke_Active"):
        os.remove(_file_ + "/Nuke_Active")
    root.destroy()
def choose_module(module):
    module = Sections["_____" + module + "_____"]
    moduleLines = "\n".join(module)
    choiceTextBox2.config(state="normal")
    choiceTextBox2.delete("1.0", tk.END)
    choiceTextBox2.insert("1.0", moduleLines)
    choiceTextBox2.config(state="disabled")
def full_script_button_command():
    global submit, counter6
    if counter6 % 2 == 0:
        fullScriptButton.config(relief=tk.SUNKEN, bg="black", foreground="white")
        UpdateSetting("fullscript", "True")
        og_script = ent.get("1.0", tk.END)
        ent.delete("1.0", tk.END)
        ent.insert("1.0", code(og_script, choice=2))
    if counter6 % 2 == 1:
        fullScriptButton.config(relief=tk.RAISED, bg="gray", foreground="black")
        UpdateSetting("fullscript", "False")
    counter6 += 1
def settings_button_command():
    global counter5
    if counter5 % 2 == 0:
        settingsButton.config(relief=tk.SUNKEN, bg="black", foreground="white")
        settingsFrame.place(in_=ent2, x=-6, y=-6, height=322, width=812)
    if counter5 % 2 == 1:
        settingsButton.config(relief=tk.RAISED, bg="gray", foreground="black")
        settingsFrame.place_forget()
    counter5 += 1
if GetSetting("autoRunCode") != "True":
    if nuke_active:
        print("This is a nuke window")
        start_submit_thread()
        root.title('Discord.py - MVBC Module - NUKE WINDOW')
        hide_button_command()
    while True:
        try:
            text = open(_file_ + "/Saved_Code", "r").read()
            ent.insert('1.0', text)
            if ent.get("1.0",tk.END).split("\n")[0].startswith("TOKEN"):
                ent3.delete("1.0", tk.END)
                ent3.insert("1.0", ent.get("1.0", "2.0"))
                ent.delete("1.0", "2.0")
            break
        except Exception as e:
            print(str(e))
            open(_file_ + "/Saved_Code", "w").write("> !You are using the MVBC Module\n> Make sure to define TOKEN (TOKEN = [your bot token])\n> The commands from the command list start with bot.[command]")
    root.protocol("WM_DELETE_WINDOW", lambda:close_button_command())
    tk.Button(bottomFrame, text="HIDE", command=lambda:hide_button_command(), width = 10, bg="gray", font='TkDefaultFont 10 bold').grid(row=7, column=2)
    tk.Button(bottomFrame, text="CLOSE", command=lambda:close_button_command(), width = 10, bg="red", font='TkDefaultFont 10 bold').grid(row=7, column=1)
    tk.Button(bottomFrame, text="RUN", command=lambda:start_submit_thread(), width=10, bg="#2BB020", font='TkDefaultFont 10 bold').grid(row=7, column=3)
    nukeButton.grid(row=7, column=0)
    choiceButton1 = tk.Button(topFrame, bg="gray", text="ERRORS", command=lambda:button_command(), width=10, font='TkDefaultFont 10 bold')
    choiceButton1.grid(row=2)
    choiceButton2 = tk.Button(topFrame, bg="gray", text="COMMANDS", command=lambda:button_command2(), width=10, font='TkDefaultFont 10 bold')
    choiceButton2.grid(row=2, column=3)
    settingsButton = tk.Button(topFrame, bg="gray", text="SETTINGS", command=lambda:settings_button_command(), width=10, font='TkDefaultFont 10 bold')
    settingsButton.grid(row=2, column=4)
    fullScriptButton = tk.Button(settingsFrame, text="FULL SCRIPT", bg="gray", command=lambda:full_script_button_command(), width=10, font='TkDefaultFont 10 bold')
    fullScriptButton.pack(side=tk.TOP, anchor="w")
    if GetSetting("fullscript") == "True":
        fullScriptButton.config(relief=tk.SUNKEN, bg="black", foreground="white")
        counter6 += 1
    VarList1 = []
    for mod in Sections: VarList1.append(mod.replace("_____", ""))
    VarList = [VarList1[i] for i in [-1, -2]]
    for item in VarList1:
        if item not in VarList:
            VarList.append(item)
    var = tk.StringVar(root)
    var.set("MODULE")
    moduleMenu = tk.OptionMenu(topFrame, var, *VarList, command=choose_module)
    moduleMenu.config(bg="gray")
    minimizeButton2.grid(row=0, column=2)
    #submit.pack(side = tk.BOTTOM)
    ent2.grid(row=3, column=2)
    #ent2.config(foreground="green")
    minimizeButton.grid(row=4, column=2)
    ent3.grid(row=5, column=2)
    choiceTextBox2.insert(tk.END, "> TOKEN variable is required\n")
    choiceTextBox2.insert(tk.END, "> Bot commands start with .bot\n")
    choiceTextBox2.insert(tk.END, "Bot Commands\n—————————————\n")
    for command in commands:
        choiceTextBox2.insert(tk.END, command + "\n")
    ent.grid(row=6, column=2)
    choiceTextBox2.insert(tk.END, "—————————————\n")
    choiceTextBox2.config(state="disabled")

#**ENDCAP**
ID='SendDirectMessage testing'
code_counter = 0
def code(mainText, choice=0):
    global code_counter
    if choice == 1:
        code_counter += 1
    else:
        code_counter = 0
    if code_counter == 2:
        print("\n—————————————\n")
        print("TOKEN INVALID")
        print("\n—————————————\n")
        return
    og_mainText = mainText
    error = True
    while error:
        if GetSetting("autoRunCode") != "True":
            exec(ent3.get("1.0", tk.END), globals())
        mainText = og_mainText
        final = ""
        error = False
        if GetSetting("autoRunCode") != "True":
            text = ent3.get("1.0", tk.END) + mainText
        else:
            text = mainText
        text = text.split("\n")
        try:
            if text[-1] == "":
                del(text[-1])
            if text[0] == "":
                del(text[0])
            if text[1] == "":
                del(text[1])
        except:
            pass
        text = "\n".join(text)
        open(_file_+"/Saved_Code", "w").write(text)
        mainLines = mainText.split("\n")
        z = 0
        y = 0
        for line in mainLines:
            y += 1
        for i in range(y):
            line = mainLines[z]
            thru = True
            if line.startswith(">"):
                del(mainLines[z])
            elif line.startswith("TOKEN"):
                line = line.replace(" ", "")
                line = line.replace('''"''', "")
                line = line.replace("'", "")
                line = line.split("=")
                final += line[0] + " = '" + line[1] + "'" + "\n"
                del(mainLines[z])
            else:
                line = line[:line.find("(")]
                line = line.replace("bot", "clientCommands")
                line = line.replace("    ", "")
                line = line.replace("\t", "")
                exec("line2 = None", globals())
                if "clientCommands." in line:
                    try:
                        exec("line2 = (inspect.iscoroutinefunction(" + line + "))", globals())
                    except SyntaxError:
                        exec("line2 = False", globals())
                else:
                    exec("line2 = False", globals())
                mainLines[z] = mainLines[z].replace("    ", "\t")
                indents = 0
                for word in mainLines[z]:
                    if word == "\t":
                        indents += 1
                mainLines[z] = mainLines[z].replace("\t", "")
                if line == "":
                    del(mainLines[z])
                else:
                    if line2 == True:
                        mainLines[z] = "    await " + mainLines[z]
                        thru = False
                    if line2 == False:
                        mainLines[z] = "    " + mainLines[z]
                        thru = False
                    if thru == True:
                        mainLines[z] = "    " + mainLines[z]
                    for i in range(indents):
                        mainLines[z] = "\t" + mainLines[z]
                    z += 1
        #del(mainLines[-1])
        if GetSetting("REPL") == "True":
            keep_alive()
        mainText = "\n".join(mainLines)
        try:
            if choice == 0:
                print("Starting...")
                if not GetSetting("fullscript") == "True":
                    final += '''print(TOKEN)\nbot = clientCommands(createBot(TOKEN, bot=False))\n@bot.client.event\nasync def on_ready():\n    bot.prep()\n'''+mainText+'''\nrun()'''
                else:
                    final = og_mainText
                print(final)
                print("-------------------------")
                exec(final, globals())
                print("\n")
                break
            if choice == 1:
                print("Starting...")
                print("\nERROR: HTTPException")
                print("--Trying Bot Mode--")
                if not GetSetting("fullscript") == "True":
                    final += '''bot = clientCommands(createBot(TOKEN, bot=True))\n@bot.client.event\nasync def on_ready():\n    bot.prep()\n'''+mainText+'''\nrun()'''
                else:
                    final = og_mainText
                print(final)
                print("-------------------------")
                exec(final, globals())
                print("\n")
                break
            if choice == 2:
                final += '''bot = clientCommands(createBot(TOKEN, bot=True))\n@bot.client.event\nasync def on_ready():\n    bot.prep()\n'''+mainText+'''\nrun()'''
                return final
                break
            if choice == 3:
                print("Starting...")
                final = og_mainText
                print(final)
                print("-------------------------")
                exec(final, globals())
                break
        except Exception as e:
            if str(e) != "This event loop is already running":
                print("\n—————————————\n")
                print(str(e))
                print("\n—————————————\n")
def Exception(*args, **kwargs):
    code(mainText, choice=1)
if GetSetting("REPL") == "True":
    discord.errors.HTTPException = Exception()
else:
    discord.errors.HTTPException = Exception
def preinfo():
    print("Discord.py Version: " + discord.__version__)
    try:
        if ID != "":
            print("MVBC GUI ID: " + ID)
        else:
            print("MVBC GUI ID: NO ID")
    except:
        pass
if GetSetting("autoRunCode") != "True":
    class StdRedirector(object):
        def __init__(self, text_widget):
            self.text_space = text_widget

        def write(self, string):
            self.text_space.config(state=tk.NORMAL)
            self.text_space.insert("end", string)
            self.text_space.see("end")
            self.text_space.config(state=tk.DISABLED)
    sys.stdout = StdRedirector(ent2)
    sys.stderr = StdRedirector(choiceTextBox1)
    preinfo()
    root.mainloop()
else:
    preinfo()
    code(open(_file_+"/Saved_Code", "r").read())
